agent_of_rule_changing
=> nrel_main_idtf:
	[агентная scp-программа замены по правилу] (* <- lang_ru;; *);
	[agent scp-program of rule changing] (* <- lang_en;; *);
	<- agent_scp_program;;

scp_program -> agent_of_rule_changing 
	(*
	-> rrel_params: .agent_of_rule_changing_params 
		(*
		-> rrel_1: rrel_in: _event;;
		-> rrel_2: rrel_in: _input_arc;;
		*);;

	-> rrel_operators: .agent_of_rule_changing_operator_set 
		(*
		-> rrel_init: .agent_of_rule_changing_operator1A 
			(*
			<- searchElStr3;;

			-> rrel_1: rrel_assign: rrel_scp_var: _temp;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _quest;;

			=> nrel_goto: .agent_of_rule_changing_operator1B;;
			*);;

		-> .agent_of_rule_changing_operator1B 
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: action_to_make_rule_changing;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  	=> nrel_then: .agent_of_rule_changing_operator1C1;;  
		  	=> nrel_else: .agent_of_rule_changing_operator_return;; 
			*);;
		
		-> .agent_of_rule_changing_operator1C1 
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _struct;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;

		  	=> nrel_then: .agent_of_rule_changing_operator1C2;;
		  	=> nrel_else: .agent_of_rule_changing_operator_return;;
			*);;

		-> .agent_of_rule_changing_operator1C2 
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: section;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _struct;;

		  	=> nrel_then: .agent_of_rule_changing_operator1C3;;
		  	=> nrel_else: .agent_of_rule_changing_operator_show_message_1;;
			*);;

		-> .agent_of_rule_changing_operator1C3 
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _rule;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;

		  	=> nrel_then: .agent_of_rule_changing_operator1C4;;
		  	=> nrel_else: .agent_of_rule_changing_operator_return;;
			*);;
			
		-> .agent_of_rule_changing_operator1C4 
			(*
		  	<- searchElStr3;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: statement;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _rule;;

		  	=> nrel_then: .agent_of_rule_changing_operator1C5;;
		  	=> nrel_else: .agent_of_rule_changing_operator_show_message_2;;
			*);;
		

		-> .agent_of_rule_changing_operator1C5
			(*
		  	<- searchElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _rule;;
		  	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _main_part_of_statement;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		  	-> rrel_5: rrel_fixed: rrel_scp_const: rrel_main_key_sc_element;;

		  	=> nrel_then: .agent_of_rule_changing_operator1D1;;
		  	=> nrel_else: .agent_of_rule_changing_operator_return;;
			*);;

		-> .agent_of_rule_changing_operator1D1 
			(*
		  	<- call;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_rule_changing;;
		  	-> rrel_2: rrel_fixed: rrel_scp_const: .agent_of_rule_changing_operator1D1_params 
		  		(*
				-> rrel_1: rrel_fixed: rrel_scp_var: _main_part_of_statement;;
                                -> rrel_2: rrel_fixed: rrel_scp_var: _struct;;
				*);;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _descr1;;

		  	=> nrel_goto: .agent_of_rule_changing_operator1D2;;
			*);;

		-> .agent_of_rule_changing_operator1D2 
			(*
		  	<- waitReturn;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;

		  	=> nrel_goto: .agent_of_rule_changing_operator1E;;
			*);;     

		-> .agent_of_rule_changing_operator1E
			(*
		  	<- genElStr5;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		  	-> rrel_2: rrel_assign: rrel_common: rrel_const: rrel_scp_var: _arc1;;
		  	-> rrel_3: rrel_fixed: rrel_scp_var: _struct;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_const: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_answer;;

		  	=> nrel_goto: .agent_of_rule_changing_operator_return;;
			*);;    

		-> .agent_of_rule_changing_operator_show_message_1 
                	(*
		  	<- call;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_adding_validating_message;;
		  	-> rrel_2: rrel_fixed: rrel_scp_const: .agent_of_rule_changing_operator_show_message_1_params 
				(*
				-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
				-> rrel_2: rrel_fixed: rrel_scp_const: [Wrong first parameter! It must be a section! ];;
				*);;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _descr1;;

		  	=> nrel_goto: .agent_of_rule_changing_operator_show_message_1_waitreturn;;
			*);;  

		-> .agent_of_rule_changing_operator_show_message_1_waitreturn
			(*
		  	<- waitReturn;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;

		  	=> nrel_goto: .agent_of_rule_changing_operator_return;;
			*);; 

		-> .agent_of_rule_changing_operator_show_message_2
                	(*
		  	<- call;;

		  	-> rrel_1: rrel_fixed: rrel_scp_const: proc_of_adding_validating_message;;
		  	-> rrel_2: rrel_fixed: rrel_scp_const: .agent_of_rule_changing_operator_show_message_2_params 
				(*
				-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
				-> rrel_2: rrel_fixed: rrel_scp_const: [Wrong second parameter! It must be a statement! ];;
				*);;
		  	-> rrel_3: rrel_assign: rrel_scp_var: _descr2;;

		  	=> nrel_goto: .agent_of_rule_changing_operator_show_message_2_waitreturn;;
			*);;  

		-> .agent_of_rule_changing_operator_show_message_2_waitreturn
			(*
		  	<- waitReturn;;

		  	-> rrel_1: rrel_fixed: rrel_scp_var: _descr2;;

		  	=> nrel_goto: .agent_of_rule_changing_operator_return;;
			*);;                              
					
		-> .agent_of_rule_changing_operator_return 
			(*
		  	<- return;;
			*);;
		*);;
	*);;

